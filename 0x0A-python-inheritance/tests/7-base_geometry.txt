# 7-base_geometry module
==============================

Testing function  ``BaseGeometry()``
------------------------------

Importing function from module:
	  >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Checking regular expression:
	 >>> bg = BaseGeometry()
	 >>> print(isinstance(bg, BaseGeometry))
	 True
	 >>> bg.integer_validator("name", 20)

Testing area:
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Testing integer_validator:
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> bg.integer_validator("name")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Testing integer_validator with different datatype for value:
	>>> bg.integer_validator("name", 1)

	>>> bg.integer_validator("name", 0)
	Traceback (most recent call last):
	...
	ValueError: name must be greater than 0
	>>> bg.integer_validator("name", -2)
	Traceback (most recent call last):
	...
	ValueError: name must be greater than 0
	>>> bg.integer_validator("name", "10")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", (5, 6))
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", [1, 2, 3, 4])
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", True)
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", [10])
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", None)
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> bg.integer_validator("name", {1, 2, 3})
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
